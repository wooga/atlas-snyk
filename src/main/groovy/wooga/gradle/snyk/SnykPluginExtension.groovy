package wooga.gradle.snyk

import org.gradle.api.Action
import org.gradle.api.Project
import org.gradle.api.file.Directory
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.provider.Property
import org.gradle.api.provider.Provider
import org.gradle.api.tasks.Internal
import org.gradle.api.tasks.TaskProvider
import org.gradle.util.ConfigureUtil
import wooga.gradle.snyk.cli.*
import wooga.gradle.snyk.tasks.Monitor
import wooga.gradle.snyk.tasks.Report
import wooga.gradle.snyk.tasks.Test

trait SnykPluginExtension implements
        SnykTestSpec, SnykMonitorSpec, SnykTaskSpec, SnykCommonArgumentSpec, SnykProjectSpec {

    abstract TaskProvider<Test> getSnykTest()

    abstract TaskProvider<Monitor> getSnykMonitor()

    abstract TaskProvider<Report> getSnykReport()

    abstract Project getProject()

    void snykTest(Action<Test> action) {
        snykTest.configure(action)
    }

    void snykTest(Closure configure) {
        snykTest.configure(ConfigureUtil.configureUsing(configure))
    }

    void snykMonitor(Action<Monitor> action) {
        snykMonitor.configure(action)
    }

    void snykMonitor(Closure configure) {
        snykMonitor.configure(ConfigureUtil.configureUsing(configure))
    }

    void snykReport(Action<Report> action) {
        snykReport.configure(action)
    }

    void snykReport(Closure configure) {
        snykReport.configure(ConfigureUtil.configureUsing(configure))
    }

    private final Property<Boolean> jsonReportsEnabled = objects.property(Boolean)

    Property<Boolean> getJsonReportsEnabled() {
        jsonReportsEnabled
    }

    void setJsonReportsEnabled(Provider<Boolean> value) {
        jsonReportsEnabled.set(value)
    }

    void setJsonReportsEnabled(Boolean value) {
        jsonReportsEnabled.set(value)
    }

    private final Property<Boolean> sarifReportsEnabled = objects.property(Boolean)

    Property<Boolean> getSarifReportsEnabled() {
        sarifReportsEnabled
    }

    void setSarifReportsEnabled(Provider<Boolean> value) {
        sarifReportsEnabled.set(value)
    }

    void setSarifReportsEnabled(Boolean value) {
        sarifReportsEnabled.set(value)
    }

    private final DirectoryProperty reportsDir = objects.directoryProperty()

    /**
     * @return The directory where reports generated by Snyk
     */
    @Internal
    DirectoryProperty getReportsDir() {
        reportsDir
    }

    void setReportsDir(Provider<Directory> value) {
        reportsDir.set(value)
    }

    void setReportsDir(String value) {
        def file = new File(value)
        reportsDir.set(file)
    }
}
